openapi: 3.0.3
info:
  title: Generated API
  version: 1.0.0
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
servers:
  - url: https://api.example.com
    description: Production server
paths:
  paths:
    /brands:
      get:
        summary: List brands by userId
        operationId: listBrandsByUserId
        parameters:
          - name: user_id
            in: query
            required: true
            schema:
              type: string
          - $ref: components/parameters/pagination.yaml#/pagination
        responses:
          "200":
            description: List of brands for a user
            content:
              application/json:
                schema:
                  type: array
                  items:
                    $ref: components/schemas/api/internal/brand/BrandGet.yaml
          "400":
            $ref: components/responses/BadRequest.yaml#/BadRequest
          "401":
            $ref: components/responses/Unauthorized.yaml#/Unauthorized
          "429":
            $ref: components/responses/RateLimitExceeded.yaml#/RateLimitExceeded
      post:
        summary: Create a new brand
        operationId: createBrand
        requestBody:
          required: true
          content:
            application/json:
              schema:
                $ref: components/schemas/api/internal/brand/BrandCreate.yaml
        responses:
          "201":
            description: Brand created
            content:
              application/json:
                schema:
                  $ref: components/schemas/api/internal/brand/BrandResponse.yaml
          "400":
            $ref: components/responses/BadRequest.yaml#/BadRequest
          "401":
            $ref: components/responses/Unauthorized.yaml#/Unauthorized
          "429":
            $ref: components/responses/RateLimitExceeded.yaml#/RateLimitExceeded
    /brands/{id}:
      get:
        summary: Get a brand by ID
        operationId: getBrandById
        parameters:
          - name: id
            in: path
            required: true
            schema:
              type: string
        responses:
          "200":
            description: Brand details
            content:
              application/json:
                schema:
                  $ref: components/schemas/api/internal/brand/BrandGet.yaml
          "401":
            $ref: components/responses/Unauthorized.yaml#/Unauthorized
          "404":
            $ref: components/responses/NotFound.yaml#/NotFound
          "429":
            $ref: components/responses/RateLimitExceeded.yaml#/RateLimitExceeded
      patch:
        summary: Update a brand by ID
        operationId: updateBrandById
        parameters:
          - name: id
            in: path
            required: true
            schema:
              type: string
        requestBody:
          required: true
          content:
            application/json:
              schema:
                $ref: components/schemas/api/internal/brand/BrandUpdate.yaml
        responses:
          "200":
            description: Brand updated
            content:
              application/json:
                schema:
                  $ref: components/schemas/api/internal/brand/BrandResponse.yaml
          "400":
            $ref: components/responses/BadRequest.yaml#/BadRequest
          "401":
            $ref: components/responses/Unauthorized.yaml#/Unauthorized
          "404":
            $ref: components/responses/NotFound.yaml#/NotFound
          "429":
            $ref: components/responses/RateLimitExceeded.yaml#/RateLimitExceeded
      delete:
        summary: Delete a brand by ID
        operationId: deleteBrandById
        parameters:
          - name: id
            in: path
            required: true
            schema:
              type: string
        responses:
          "204":
            description: Brand deleted
          "401":
            $ref: components/responses/Unauthorized.yaml#/Unauthorized
          "404":
            $ref: components/responses/NotFound.yaml#/NotFound
          "429":
            $ref: components/responses/RateLimitExceeded.yaml#/RateLimitExceeded
components:
  parameters:
    pagination:
      in: query
      name: pagination
      required: false
      schema:
        type: object
        properties:
          limit:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
          offset:
            type: integer
            minimum: 0
            default: 0
          sort_by:
            type: string
            enum:
              - created_at
              - updated_at
              - name
            default: created_at
          sort_order:
            type: string
            enum:
              - asc
              - desc
            default: desc
    id:
      name: id
      in: path
      required: true
      schema:
        type: string
        format: uuid
      description: resource identifier (uuid)
    filter:
      name: filter
      in: query
      required: false
      schema:
        type: string
      description: filter criteria in the format field:operator:value (e.g., name:contains:test)
      example: name:contains:acme
    brand_id:
      name: brand_id
      in: query
      required: true
      schema:
        type: string
        format: uuid
      description: brand identifier (uuid)
  responses:
    Unauthorized:
      description: Authentication required
      content:
        application/json:
          schema:
            $ref: components/schemas/common/base/Error.yaml#/Error
          example:
            code: UNAUTHORIZED
            message: Valid API key required
    RateLimitExceeded:
      description: Rate limit exceeded
      content:
        application/json:
          schema:
            $ref: components/schemas/common/base/Error.yaml#/Error
          example:
            code: RATE_LIMIT_EXCEEDED
            message: Rate limit exceeded
    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: components/schemas/common/base/Error.yaml#/Error
          example:
            code: RESOURCE_NOT_FOUND
            message: The requested resource was not found
    BadRequest:
      description: Invalid request parameters
      content:
        application/json:
          schema:
            $ref: components/schemas/common/base/Error.yaml#/Error
          example:
            code: INVALID_INPUT
            message: Invalid request parameters
  schemas:
    PostDocument:
      type: object
      description: Stub for PostDocument schema
    MediaDocument:
      allOf:
        - $ref: components/schemas/common/base/BaseModel.yaml#/BaseModel
        - type: object
          properties:
            brandId:
              type: string
            blobUrl:
              type: string
            mediaType:
              type: string
              enum:
                - image
                - video
            mediaMetadata:
              $ref: components/schemas/common/media/MediaMetadata.yaml#/MediaMetadata
    ContentGenerationTemplateDocument:
      allOf:
        - $ref: components/schemas/common/base/BaseModel.yaml#/BaseModel
        - type: object
          properties:
            brandId:
              type: string
            templateInfo:
              $ref: components/schemas/common/template/TemplateInfo.yaml#/TemplateInfo
            schedule:
              $ref: components/schemas/common/schedule/Schedule.yaml#/Schedule
            settings:
              $ref: components/schemas/common/template/TemplateSettings.yaml#/TemplateSettings
    BrandDocument:
      allOf:
        - $ref: components/schemas/common/base/BaseModel.yaml#/BaseModel
        - type: object
          properties:
            user_id:
              type: string
            brand_info:
              $ref: components/schemas/common/base/BrandInfo.yaml#/BrandInfo
            socialAccounts:
              type: array
              items:
                $ref: components/schemas/common/social/SocialAccountEntry.yaml#/SocialAccountEntry
    TemplateSettings:
      type: object
      properties:
        prompt_template:
          $ref: components/schemas/common/template/PromptTemplate.yaml#/PromptTemplate
        visual_style:
          $ref: components/schemas/common/style/VisualStyleObj.yaml#/VisualStyleObj
        contentItem:
          $ref: components/schemas/common/base/ContentItem.yaml#/ContentItem
    TemplateInfo:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        contentType:
          $ref: components/schemas/common/base/ContentType.yaml#/ContentType
        socialAccounts:
          type: array
          items:
            $ref: components/schemas/common/social/Platform.yaml#/Platform
    PromptVariable:
      type: object
      properties:
        name:
          type: string
        values:
          type: array
          items:
            type: string
        description:
          type: string
    PromptTemplate:
      type: object
      properties:
        system_prompt:
          type: string
        user_prompt:
          type: string
        temperature:
          type: number
        max_tokens:
          type: integer
        model:
          type: string
        variables:
          type: array
          items:
            $ref: components/schemas/common/template/PromptVariable.yaml#/PromptVariable
    VisualStyleObj:
      type: object
      properties:
        themes:
          type: array
          items:
            $ref: components/schemas/common/style/VisualStyle.yaml#/VisualStyle
    VisualStyle:
      type: object
      properties:
        font:
          type: object
          required:
            - family
            - size
          properties:
            family:
              type: string
              description: Font family for the overlay text (e.g., Arial).
            size:
              type: string
              description: Font size (e.g., "32px").
            weight:
              type: string
              enum:
                - normal
                - bold
              description: Font weight for the overlay text.
            style:
              type: string
              enum:
                - normal
                - italic
              description: Font style for the overlay text.
        color:
          type: object
          required:
            - text
            - background
          properties:
            text:
              type: string
              description: Color for the overlay text (e.g., "#000000").
            background:
              type: string
              description: Background color for the overlay area (e.g., "#FFFFFF").
            box:
              type: string
              description: Color of the text box background (e.g., "#000000").
            outline:
              type: string
              description: Color for text outline (if supported).
        outline:
          type: object
          properties:
            color:
              type: string
              description: Color for text outline (if supported).
            width:
              type: integer
    TextStyle:
      type: object
      properties:
        font:
          $ref: components/schemas/common/style/Font.yaml#/Font
        font_color:
          type: string
        outline:
          $ref: components/schemas/common/style/Outline.yaml#/Outline
        alignment:
          $ref: components/schemas/common/style/Alignment.yaml#/Alignment
    OverlayBox:
      type: object
      properties:
        color:
          type: string
        transparency:
          type: number
        vertical_location:
          type: string
        horizontal_location:
          type: string
    Outline:
      type: object
      properties:
        color:
          type: string
        width:
          type: integer
    Fonts:
      type: array
      description: Font definitions for use by both backend and frontend
      items:
        type: object
        properties:
          family:
            type: string
          display_name:
            type: string
          styles:
            type: object
            properties:
              regular:
                type: string
              bold:
                type: string
              italic:
                type: string
              bold_italic:
                type: string
    Font:
      type: object
      properties:
        family:
          type: string
        size:
          type: string
        weight:
          type: string
        style:
          type: string
    Alignment:
      type: object
      properties:
        text_align:
          type: string
    SocialAccountEntry:
      type: object
      properties:
        platform:
          $ref: components/schemas/common/social/Platform.yaml#/Platform
        account:
          $ref: components/schemas/common/social/SocialAccount.yaml#/SocialAccount
    SocialAccount:
      type: object
      required:
        - id
        - username
        - accessToken
        - profileUrl
        - expiry_date
      properties:
        id:
          type: string
          description: Unique identifier for the social account
        username:
          type: string
          description: Username for the social account
        accessToken:
          type: string
          description: OAuth access token
        profileUrl:
          type: string
          description: URL to the user's profile
        expiry_date:
          type: string
          format: date-time
          description: Token expiration timestamp
    Platform:
      type: string
      enum:
        - instagram
        - facebook
        - twitter
        - tiktok
    TimeSlot:
      type: object
      required:
        - hour
        - minute
        - timezone
      properties:
        hour:
          type: integer
          minimum: 0
          maximum: 23
          description: Hour in 24-hour format
        minute:
          type: integer
          minimum: 0
          maximum: 59
          description: Minute
        timezone:
          type: string
          description: Timezone string (e.g., 'America/New_York')
    Schedule:
      type: object
      required:
        - days_of_week
        - time_slots
      properties:
        days_of_week:
          type: array
          items:
            type: string
            enum:
              - monday
              - tuesday
              - wednesday
              - thursday
              - friday
              - saturday
              - sunday
        time_slots:
          type: array
          items:
            $ref: components/schemas/common/schedule/TimeSlot.yaml#/TimeSlot
    Video:
      type: object
      properties:
        media_type:
          $ref: components/schemas/common/media/MediaType.yaml#/MediaType
        set_url:
          type: string
        visualStyle:
          $ref: components/schemas/common/style/VisualStyle.yaml#/VisualStyle
    MultiImage:
      type: object
      properties:
        images:
          type: array
          items:
            $ref: components/schemas/common/media/Image.yaml#/Image
        min_images:
          type: integer
        max_images:
          type: integer
    MediaType:
      type: string
      enum:
        - Color
        - Set
        - Uploaded
        - Online
    MediaMetadata:
      type: object
      required:
        - fileName
        - tags
        - cognitiveData
      properties:
        fileName:
          type: string
        description:
          type: string
        tags:
          type: array
          items:
            type: string
        suggestedName:
          type: string
        cognitiveData:
          $ref: components/schemas/common/cognitive/CognitiveData.yaml#/CognitiveData
    Image:
      type: object
      properties:
        media_type:
          $ref: components/schemas/common/media/MediaType.yaml#/MediaType
        set_url:
          type: string
        visualStyle:
          $ref: components/schemas/common/style/VisualStyle.yaml#/VisualStyle
    Rectangle:
      type: object
      required:
        - x
        - "y"
        - w
        - h
      properties:
        x:
          type: number
        "y":
          type: number
        w:
          type: number
        h:
          type: number
    CognitiveTag:
      type: object
      required:
        - name
        - confidence
      properties:
        name:
          type: string
        confidence:
          type: number
    CognitivePerson:
      type: object
      required:
        - confidence
        - rectangle
      properties:
        confidence:
          type: number
        rectangle:
          $ref: components/schemas/common/cognitive/Rectangle.yaml#/Rectangle
    CognitiveObject:
      type: object
      required:
        - object
        - confidence
        - rectangle
      properties:
        object:
          type: string
        confidence:
          type: number
        rectangle:
          $ref: components/schemas/common/cognitive/Rectangle.yaml#/Rectangle
    CognitiveDenseCaption:
      type: object
      required:
        - text
        - confidence
        - boundingBox
      properties:
        text:
          type: string
        confidence:
          type: number
        boundingBox:
          $ref: components/schemas/common/cognitive/Rectangle.yaml#/Rectangle
    CognitiveData:
      type: object
      properties:
        tags:
          type: array
          items:
            $ref: components/schemas/common/cognitive/CognitiveTag.yaml#/CognitiveTag
        categories:
          type: array
          items:
            $ref: components/schemas/common/cognitive/CognitiveCategory.yaml#/CognitiveCategory
        objects:
          type: array
          items:
            $ref: components/schemas/common/cognitive/CognitiveObject.yaml#/CognitiveObject
        caption:
          $ref: components/schemas/common/cognitive/CognitiveCaption.yaml#/CognitiveCaption
        denseCaptions:
          type: array
          items:
            $ref: components/schemas/common/cognitive/CognitiveDenseCaption.yaml#/CognitiveDenseCaption
        brands:
          type: array
          items:
            $ref: components/schemas/common/cognitive/CognitiveBrand.yaml#/CognitiveBrand
        people:
          type: array
          items:
            $ref: components/schemas/common/cognitive/CognitivePerson.yaml#/CognitivePerson
        ocrText:
          type: string
    CognitiveCategory:
      type: object
      required:
        - name
        - confidence
      properties:
        name:
          type: string
        confidence:
          type: number
    CognitiveCaption:
      type: object
      required:
        - text
        - confidence
      properties:
        text:
          type: string
        confidence:
          type: number
    CognitiveBrand:
      type: object
      required:
        - name
        - confidence
      properties:
        name:
          type: string
        confidence:
          type: number
    Text:
      type: object
      properties:
        value:
          type: string
    Metadata:
      type: object
      required:
        - created_date
        - updated_date
        - is_active
      properties:
        created_date:
          type: string
          format: date-time
          description: Creation timestamp
        updated_date:
          type: string
          format: date-time
          description: Last update timestamp
        is_active:
          type: boolean
          description: Whether the record is active or soft-deleted
    Error:
      type: object
      properties:
        code:
          type: string
          description: Error code identifier
        message:
          type: string
          description: Human-readable error message
        details:
          type: string
          description: Optional additional error details
          nullable: true
      required:
        - code
        - message
      description: Standard error response object
    ContentType:
      type: string
      enum:
        - text
        - video
        - multi_image
        - image
    ContentItem:
      type: object
      properties:
        text:
          $ref: components/schemas/common/base/Text.yaml#/Text
        image:
          $ref: components/schemas/common/media/Image.yaml#/Image
        video:
          $ref: components/schemas/common/media/Video.yaml#/Video
        multiImage:
          $ref: components/schemas/common/media/MultiImage.yaml#/MultiImage
    BrandInfo:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
    BaseModel:
      type: object
      required:
        - id
        - metadata
      properties:
        id:
          type: string
          description: unique identifier for the record
        metadata:
          $ref: components/schemas/common/base/Metadata.yaml#/Metadata
    ContentGenerationTemplateUpdate:
      type: object
      properties:
        brandId:
          type: string
        templateInfo:
          $ref: components/schemas/common/template/TemplateInfo.yaml#/TemplateInfo
        schedule:
          $ref: components/schemas/common/schedule/Schedule.yaml#/Schedule
        settings:
          $ref: components/schemas/common/template/TemplateSettings.yaml#/TemplateSettings
        deleted:
          type: boolean
      description: |
        Payload for updating a ContentGenerationTemplateDocument. All fields are optional and may be provided for partial update.
    ContentGenerationTemplateResponse:
      type: object
      properties:
        id:
          type: string
        brandId:
          type: string
      description: |
        Minimal response schema for ContentGenerationTemplateDocument creation or deletion.
    ContentGenerationTemplateGet:
      allOf:
        - $ref: components/schemas/documents/ContentGenerationTemplateDocument.yaml#/ContentGenerationTemplateDocument
      description: |
        Response schema for retrieving a ContentGenerationTemplateDocument by id or brandId.
    ContentGenerationTemplateDelete:
      type: object
      required:
        - id
      properties:
        id:
          type: string
      description: |
        Payload for deleting a ContentGenerationTemplateDocument by id.
    ContentGenerationTemplateCreate:
      type: object
      required:
        - brandId
        - templateInfo
      properties:
        brandId:
          type: string
        templateInfo:
          $ref: components/schemas/common/template/TemplateInfo.yaml#/TemplateInfo
        schedule:
          $ref: components/schemas/common/schedule/Schedule.yaml#/Schedule
        settings:
          $ref: components/schemas/common/template/TemplateSettings.yaml#/TemplateSettings
      description: |
        Payload for creating a new ContentGenerationTemplateDocument. 'brandId' and 'templateInfo' are required.
    BrandUpdate:
      type: object
      properties:
        brandInfo:
          $ref: components/schemas/common/base/BrandInfo.yaml#/BrandInfo
        socialAccounts:
          type: array
          items:
            $ref: components/schemas/common/social/SocialAccountEntry.yaml#/SocialAccountEntry
      description: |
        Payload for updating a Brand. All fields are optional and may be provided for partial update.
    BrandResponse:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
      description: |
        Minimal response schema for Brand creation or deletion.
    BrandGet:
      allOf:
        - $ref: components/schemas/documents/BrandDocument.yaml#/BrandDocument
      description: |
        Response schema for retrieving a Brand by id or user_id.
    BrandDelete:
      type: object
      required:
        - id
      properties:
        id:
          type: string
      description: |
        Payload for deleting a Brand by id.
    BrandCreate:
      type: object
      required:
        - brandInfo
      properties:
        brandInfo:
          $ref: components/schemas/common/base/BrandInfo.yaml#/BrandInfo
      description: |
        Payload for creating a new Brand. Only 'brandInfo' is required.
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    ApiKeyAuth:
      type: apiKey
      description: api key authentication for all endpoints
      name: x-api-key
      in: header
      x-example: your-api-key-here

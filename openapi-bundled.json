{
  "openapi": "3.1.0",
  "info": {
    "title": "AutogenSocial API",
    "version": "1.0.0",
    "description": "OpenAPI specification for the AutogenSocial API. This file references all modular components and operations.",
    "license": {
      "name": "MIT",
      "url": "https://opensource.org/license/mit/"
    }
  },
  "servers": [
    {
      "url": "https://autogensocial-api.1084ventures.com"
    }
  ],
  "security": [
    {
      "bearerAuth": []
    }
  ],
  "paths": {
    "/media": {
      "get": {
        "operationId": "listMedia",
        "summary": "List media by brandId",
        "parameters": [
          {
            "name": "brand_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/pagination"
          }
        ],
        "responses": {
          "200": {
            "description": "List of media for a brand",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MediaGet"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "429": {
            "$ref": "#/components/responses/RateLimitExceeded"
          }
        }
      },
      "post": {
        "operationId": "createMedia",
        "summary": "Create a new media item",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MediaCreate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Media created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MediaGet"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "429": {
            "$ref": "#/components/responses/RateLimitExceeded"
          }
        }
      }
    },
    "/media/{id}": {
      "get": {
        "operationId": "getMediaById",
        "summary": "Get a media item by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Media item details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MediaGet"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "429": {
            "$ref": "#/components/responses/RateLimitExceeded"
          }
        }
      },
      "put": {
        "operationId": "updateMediaById",
        "summary": "Update a media item by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MediaUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Media item updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MediaGet"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "429": {
            "$ref": "#/components/responses/RateLimitExceeded"
          }
        }
      },
      "delete": {
        "operationId": "deleteMediaById",
        "summary": "Delete a media item by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Media item deleted",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "id": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "429": {
            "$ref": "#/components/responses/RateLimitExceeded"
          }
        }
      }
    },
    "/media/analyze": {
      "post": {
        "operationId": "analyzeMedia",
        "summary": "Analyze a media item (image) using AI/Cognitive Services",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "imageBase64": {
                    "type": "string",
                    "description": "Base64-encoded image data (optionally with data URL prefix)"
                  }
                },
                "required": [
                  "imageBase64"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Analysis result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CognitiveData"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "$ref": "#/components/responses/RateLimitExceeded"
          }
        }
      }
    },
    "/content-generation-templates": {
      "get": {
        "operationId": "listContentGenerationTemplates",
        "summary": "List content generation templates by brandId",
        "parameters": [
          {
            "name": "brand_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/pagination"
          }
        ],
        "responses": {
          "200": {
            "description": "List of content generation templates for a brand",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ContentGenerationTemplateGet"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "429": {
            "$ref": "#/components/responses/RateLimitExceeded"
          }
        }
      },
      "post": {
        "operationId": "createContentGenerationTemplate",
        "summary": "Create a new content generation template",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContentGenerationTemplateCreate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Content generation template created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContentGenerationTemplateResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "429": {
            "$ref": "#/components/responses/RateLimitExceeded"
          }
        }
      }
    },
    "/content-generation-templates/{id}": {
      "get": {
        "operationId": "getContentGenerationTemplateById",
        "summary": "Get a content generation template by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Content generation template details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContentGenerationTemplateGet"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "429": {
            "$ref": "#/components/responses/RateLimitExceeded"
          }
        }
      },
      "patch": {
        "operationId": "updateContentGenerationTemplateById",
        "summary": "Update a content generation template by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContentGenerationTemplateUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Content generation template updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContentGenerationTemplateResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "429": {
            "$ref": "#/components/responses/RateLimitExceeded"
          }
        }
      },
      "delete": {
        "operationId": "deleteContentGenerationTemplateById",
        "summary": "Delete a content generation template by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Content generation template deleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "429": {
            "$ref": "#/components/responses/RateLimitExceeded"
          }
        }
      }
    },
    "/brands": {
      "get": {
        "summary": "List brands by userId",
        "operationId": "listBrandsByUserId",
        "parameters": [
          {
            "name": "userId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/pagination"
          }
        ],
        "responses": {
          "200": {
            "description": "List of brands for a user",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BrandGet"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "429": {
            "$ref": "#/components/responses/RateLimitExceeded"
          }
        }
      },
      "post": {
        "summary": "Create a new brand",
        "operationId": "createBrand",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BrandCreate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Brand created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BrandResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "429": {
            "$ref": "#/components/responses/RateLimitExceeded"
          }
        }
      }
    },
    "/brands/{id}": {
      "get": {
        "summary": "Get a brand by ID",
        "operationId": "getBrandById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Brand details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BrandGet"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "429": {
            "$ref": "#/components/responses/RateLimitExceeded"
          }
        }
      },
      "patch": {
        "summary": "Update a brand by ID",
        "operationId": "updateBrandById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BrandUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Brand updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BrandResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "429": {
            "$ref": "#/components/responses/RateLimitExceeded"
          }
        }
      },
      "delete": {
        "summary": "Delete a brand by ID",
        "operationId": "deleteBrandById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Brand deleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "429": {
            "$ref": "#/components/responses/RateLimitExceeded"
          }
        }
      }
    },
    "/external/post-instagram-content": {
      "post": {
        "summary": "Post Instagram content",
        "operationId": "postInstagramContent",
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "MediaDocument": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseModel"
          },
          {
            "type": "object",
            "properties": {
              "brandId": {
                "type": "string"
              },
              "blobUrl": {
                "type": "string"
              },
              "mediaType": {
                "type": "string",
                "enum": [
                  "image",
                  "video"
                ]
              },
              "usageCount": {
                "type": "integer"
              },
              "mediaMetadata": {
                "$ref": "#/components/schemas/MediaMetadata"
              }
            }
          }
        ]
      },
      "ContentGenerationTemplateDocument": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseModel"
          },
          {
            "type": "object",
            "properties": {
              "brandId": {
                "type": "string"
              },
              "lastExecutionTime": {
                "type": "string",
                "format": "date-time",
                "description": "Last time the template was executed"
              },
              "templateInfo": {
                "$ref": "#/components/schemas/TemplateInfo"
              },
              "schedule": {
                "$ref": "#/components/schemas/Schedule"
              },
              "templateSettings": {
                "$ref": "#/components/schemas/TemplateSettings"
              }
            }
          }
        ]
      },
      "BrandDocument": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseModel"
          },
          {
            "type": "object",
            "properties": {
              "userId": {
                "type": "string"
              },
              "brandInfo": {
                "$ref": "#/components/schemas/BrandInfo"
              },
              "socialAccounts": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/SocialAccountEntry"
                }
              }
            }
          }
        ]
      },
      "TemplateSettings": {
        "type": "object",
        "properties": {
          "promptTemplate": {
            "$ref": "#/components/schemas/PromptTemplate"
          },
          "contentItem": {
            "$ref": "#/components/schemas/ContentItem"
          }
        }
      },
      "TemplateInfo": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "socialAccounts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Platform"
            }
          }
        }
      },
      "PromptTemplate": {
        "type": "object",
        "properties": {
          "userPrompt": {
            "type": "string"
          },
          "variables": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "values": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      },
      "VisualStyleObj": {
        "type": "object",
        "properties": {
          "themes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VisualStyle"
            }
          }
        }
      },
      "VisualStyle": {
        "type": "object",
        "properties": {
          "textStyle": {
            "$ref": "#/components/schemas/TextStyle"
          },
          "overlayBox": {
            "$ref": "#/components/schemas/OverlayBox"
          },
          "backgroundColor": {
            "type": "string",
            "description": "Background color. Only relevant when the parent object's mediaType is \"color\".\nThis property is required if mediaType is \"color\" in the parent Image or Video object, otherwise it can be omitted.\n"
          }
        }
      },
      "TextStyle": {
        "type": "object",
        "properties": {
          "font": {
            "type": "object",
            "properties": {
              "family": {
                "type": "string"
              },
              "size": {
                "type": "string"
              },
              "weight": {
                "type": "string",
                "enum": [
                  "normal",
                  "bold"
                ]
              },
              "style": {
                "type": "string",
                "enum": [
                  "normal",
                  "italic"
                ]
              },
              "color": {
                "type": "string"
              }
            }
          },
          "outline": {
            "type": "object",
            "properties": {
              "color": {
                "type": "string"
              },
              "width": {
                "type": "integer"
              }
            }
          },
          "alignment": {
            "type": "string",
            "enum": [
              "left",
              "center",
              "right"
            ]
          },
          "transparency": {
            "type": "number",
            "minimum": 0,
            "maximum": 1,
            "default": 1
          }
        }
      },
      "OverlayBox": {
        "type": "object",
        "properties": {
          "color": {
            "type": "string"
          },
          "transparency": {
            "type": "number"
          },
          "verticalLocation": {
            "type": "string",
            "enum": [
              "top",
              "middle",
              "bottom"
            ]
          },
          "horizontalLocation": {
            "type": "string",
            "enum": [
              "left",
              "middle",
              "right"
            ]
          }
        }
      },
      "Fonts": {
        "type": "array",
        "description": "Font definitions for use by both backend and frontend",
        "items": {
          "type": "object",
          "properties": {
            "family": {
              "type": "string"
            },
            "displayName": {
              "type": "string"
            },
            "styles": {
              "type": "object",
              "properties": {
                "regular": {
                  "type": "string"
                },
                "bold": {
                  "type": "string"
                },
                "italic": {
                  "type": "string"
                },
                "boldItalic": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "SocialAccountEntry": {
        "type": "object",
        "properties": {
          "platform": {
            "$ref": "#/components/schemas/Platform"
          },
          "account": {
            "$ref": "#/components/schemas/SocialAccount"
          }
        }
      },
      "SocialAccount": {
        "type": "object",
        "required": [
          "platformAccountId",
          "accessToken"
        ],
        "properties": {
          "platformAccountId": {
            "type": "string",
            "description": "Unique identifier for the account on the platform (e.g., userId, pageId, open_id)"
          },
          "handle": {
            "type": "string",
            "description": "Public-facing handle (e.g., @username)"
          },
          "username": {
            "type": "string",
            "description": "Username or login/display name for the account"
          },
          "profileUrl": {
            "type": "string",
            "description": "URL to the user's or page's profile"
          },
          "accessToken": {
            "type": "string",
            "description": "OAuth access token for API access"
          },
          "expiryDate": {
            "type": "string",
            "format": "date-time",
            "description": "Token expiration timestamp"
          },
          "extra": {
            "type": "object",
            "description": "Platform-specific additional fields (e.g., pageId for Facebook, refreshToken for TikTok)",
            "additionalProperties": true
          }
        }
      },
      "Platform": {
        "type": "string",
        "enum": [
          "instagram",
          "facebook",
          "x",
          "youtube",
          "tiktok"
        ]
      },
      "TimeSlot": {
        "type": "object",
        "required": [
          "hour",
          "minute",
          "timezone"
        ],
        "properties": {
          "hour": {
            "type": "integer",
            "minimum": 0,
            "maximum": 23,
            "description": "Hour in 24-hour format"
          },
          "minute": {
            "type": "integer",
            "minimum": 0,
            "maximum": 59,
            "description": "Minute"
          },
          "timezone": {
            "type": "string",
            "description": "Timezone string (e.g., 'America/NewYork')"
          }
        }
      },
      "Schedule": {
        "type": "object",
        "required": [
          "daysOfWeek",
          "timeSlots"
        ],
        "properties": {
          "daysOfWeek": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "monday",
                "tuesday",
                "wednesday",
                "thursday",
                "friday",
                "saturday",
                "sunday"
              ]
            }
          },
          "timeSlots": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TimeSlot"
            }
          }
        }
      },
      "VideoTemplate": {
        "type": "object",
        "properties": {
          "mediaType": {
            "$ref": "#/components/schemas/MediaType"
          },
          "setUrl": {
            "type": [
              "string",
              "null"
            ]
          },
          "visualStyleObj": {
            "$ref": "#/components/schemas/VisualStyleObj"
          },
          "aspectRatio": {
            "$ref": "#/components/schemas/AspectRatio"
          },
          "format": {
            "type": "string",
            "description": "Video file format (e.g., \"mp4\", \"webm\")"
          }
        },
        "required": [],
        "allOf": [
          {
            "if": {
              "properties": {
                "mediaType": {
                  "const": "set"
                }
              }
            },
            "then": {
              "required": [
                "setUrl"
              ]
            }
          }
        ]
      },
      "MediaType": {
        "type": "string",
        "enum": [
          "color",
          "set",
          "uploaded",
          "online"
        ]
      },
      "MediaMetadata": {
        "type": "object",
        "required": [
          "fileName",
          "tags",
          "cognitiveData"
        ],
        "properties": {
          "fileName": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "suggestedName": {
            "type": "string"
          },
          "cognitiveData": {
            "$ref": "#/components/schemas/CognitiveData"
          }
        }
      },
      "ImagesTemplate": {
        "type": "object",
        "properties": {
          "imageTemplates": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ImageTemplate"
            },
            "description": "Array of image objects"
          },
          "numImages": {
            "type": "integer",
            "description": "The exact number of images required"
          }
        }
      },
      "ImageTemplate": {
        "type": "object",
        "properties": {
          "mediaType": {
            "$ref": "#/components/schemas/MediaType"
          },
          "setUrl": {
            "type": "string"
          },
          "visualStyleObj": {
            "$ref": "#/components/schemas/VisualStyleObj"
          },
          "aspectRatio": {
            "$ref": "#/components/schemas/AspectRatio"
          },
          "format": {
            "type": "string",
            "description": "Image file format (e.g., \"jpeg\", \"png\")"
          }
        }
      },
      "AspectRatio": {
        "type": "string",
        "enum": [
          "square",
          "portrait",
          "landscape",
          "story"
        ],
        "description": "Aspect ratio (e.g., \"square\", \"portrait\", \"landscape\", \"story\")"
      },
      "Rectangle": {
        "type": "object",
        "properties": {
          "x": {
            "type": "number"
          },
          "y": {
            "type": "number"
          },
          "width": {
            "type": "number"
          },
          "height": {
            "type": "number"
          }
        }
      },
      "CognitiveTag": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "confidence": {
            "type": "number"
          }
        }
      },
      "CognitivePerson": {
        "type": "object",
        "properties": {
          "rectangle": {
            "$ref": "#/components/schemas/Rectangle"
          }
        }
      },
      "CognitiveObject": {
        "type": "object",
        "properties": {
          "rectangle": {
            "$ref": "#/components/schemas/Rectangle"
          }
        }
      },
      "CognitiveDenseCaption": {
        "type": "object",
        "properties": {
          "rectangle": {
            "$ref": "#/components/schemas/Rectangle"
          }
        }
      },
      "CognitiveData": {
        "type": "object",
        "properties": {
          "tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CognitiveTag"
            }
          },
          "categories": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CognitiveCategory"
            }
          },
          "objects": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CognitiveObject"
            }
          },
          "caption": {
            "$ref": "#/components/schemas/CognitiveCaption"
          },
          "denseCaptions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CognitiveDenseCaption"
            }
          },
          "brands": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CognitiveBrand"
            }
          },
          "people": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CognitivePerson"
            }
          },
          "rectangles": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Rectangle"
            }
          }
        }
      },
      "CognitiveCategory": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "confidence": {
            "type": "number"
          }
        }
      },
      "CognitiveCaption": {
        "type": "object",
        "properties": {
          "text": {
            "type": "string"
          },
          "confidence": {
            "type": "number"
          }
        }
      },
      "CognitiveBrand": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "confidence": {
            "type": "number"
          }
        }
      },
      "Text": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string"
          }
        }
      },
      "Metadata": {
        "type": "object",
        "required": [
          "createdDate",
          "updatedDate",
          "isActive"
        ],
        "properties": {
          "createdDate": {
            "type": "string",
            "format": "date-time",
            "description": "Creation timestamp"
          },
          "updatedDate": {
            "type": "string",
            "format": "date-time",
            "description": "Last update timestamp"
          },
          "isActive": {
            "type": "boolean",
            "description": "Whether the record is active or soft-deleted"
          }
        }
      },
      "Error": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "Error code identifier"
          },
          "message": {
            "type": "string",
            "description": "Human-readable error message"
          },
          "details": {
            "type": [
              "string",
              "null"
            ],
            "description": "Optional additional error details"
          }
        },
        "required": [
          "code",
          "message"
        ],
        "description": "Standard error response object"
      },
      "ContentItem": {
        "type": "object",
        "properties": {
          "contentType": {
            "type": "string",
            "enum": [
              "text",
              "images",
              "video"
            ]
          },
          "text": {
            "$ref": "#/components/schemas/Text"
          },
          "videoTemplate": {
            "$ref": "#/components/schemas/VideoTemplate"
          },
          "imagesTemplate": {
            "$ref": "#/components/schemas/ImagesTemplate"
          }
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/Text"
          },
          {
            "$ref": "#/components/schemas/VideoTemplate"
          },
          {
            "$ref": "#/components/schemas/ImagesTemplate"
          }
        ],
        "discriminator": {
          "propertyName": "contentType",
          "mapping": {
            "text": "#/components/schemas/Text",
            "video": "#/components/schemas/VideoTemplate",
            "images": "#/components/schemas/ImagesTemplate"
          }
        }
      },
      "BrandInfo": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          }
        }
      },
      "BaseModel": {
        "type": "object",
        "required": [
          "id",
          "metadata"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "unique identifier for the record"
          },
          "metadata": {
            "$ref": "#/components/schemas/Metadata"
          }
        }
      },
      "MediaUpdate": {
        "allOf": [
          {
            "$ref": "#/components/schemas/MediaDocument"
          },
          {
            "type": "object",
            "properties": {
              "brandId": {
                "type": "string"
              },
              "blobUrl": {
                "type": "string"
              },
              "mediaType": {
                "type": "string",
                "enum": [
                  "image",
                  "video"
                ]
              },
              "mediaMetadata": {
                "$ref": "#/components/schemas/MediaMetadata"
              }
            }
          }
        ]
      },
      "MediaGet": {
        "allOf": [
          {
            "$ref": "#/components/schemas/MediaDocument"
          }
        ],
        "description": "Response schema for retrieving a MediaDocument by id or brandId.\n"
      },
      "MediaCreate": {
        "allOf": [
          {
            "$ref": "#/components/schemas/MediaDocument"
          },
          {
            "type": "object",
            "required": [
              "brandId",
              "blobUrl",
              "mediaType",
              "mediaMetadata"
            ],
            "properties": {
              "brandId": {
                "type": "string"
              },
              "blobUrl": {
                "type": "string"
              },
              "mediaType": {
                "type": "string",
                "enum": [
                  "image",
                  "video"
                ]
              },
              "mediaMetadata": {
                "$ref": "#/components/schemas/MediaMetadata"
              }
            }
          }
        ]
      },
      "MediaAnalyze": {
        "type": "object",
        "properties": {
          "suggestedName": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CognitiveTag"
            }
          },
          "categories": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CognitiveCategory"
            }
          },
          "objects": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CognitiveObject"
            }
          },
          "caption": {
            "$ref": "#/components/schemas/CognitiveCaption"
          },
          "denseCaptions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CognitiveDenseCaption"
            }
          },
          "brands": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CognitiveBrand"
            }
          },
          "people": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CognitivePerson"
            }
          },
          "ocrText": {
            "type": "string"
          },
          "cognitiveData": {
            "$ref": "#/components/schemas/CognitiveData"
          }
        }
      },
      "ContentGenerationTemplateUpdate": {
        "type": "object",
        "properties": {
          "brandId": {
            "type": "string"
          },
          "templateInfo": {
            "$ref": "#/components/schemas/TemplateInfo"
          },
          "schedule": {
            "$ref": "#/components/schemas/Schedule"
          },
          "templateSettings": {
            "$ref": "#/components/schemas/TemplateSettings"
          }
        },
        "description": "Payload for updating a ContentGenerationTemplateDocument. All fields are optional and may be provided for partial update.\n"
      },
      "ContentGenerationTemplateResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "brandId": {
            "type": "string"
          }
        },
        "description": "Minimal response schema for ContentGenerationTemplateDocument creation or deletion.\n"
      },
      "ContentGenerationTemplateGet": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ContentGenerationTemplateDocument"
          }
        ],
        "description": "Response schema for retrieving a ContentGenerationTemplateDocument by id or brandId.\n"
      },
      "ContentGenerationTemplateCreate": {
        "type": "object",
        "required": [
          "brandId",
          "templateInfo"
        ],
        "properties": {
          "brandId": {
            "type": "string"
          },
          "templateInfo": {
            "$ref": "#/components/schemas/TemplateInfo"
          },
          "schedule": {
            "$ref": "#/components/schemas/Schedule"
          },
          "templateSettings": {
            "$ref": "#/components/schemas/TemplateSettings"
          }
        },
        "description": "Payload for creating a new ContentGenerationTemplateDocument. 'brandId' and 'templateInfo' are required.\n"
      },
      "BrandUpdate": {
        "type": "object",
        "properties": {
          "brandInfo": {
            "$ref": "#/components/schemas/BrandInfo"
          },
          "socialAccounts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SocialAccountEntry"
            }
          }
        },
        "description": "Payload for updating a Brand. All fields are optional and may be provided for partial update.\n"
      },
      "BrandResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        },
        "description": "Minimal response schema for Brand creation or deletion.\n"
      },
      "BrandGet": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BrandDocument"
          }
        ],
        "description": "Response schema for retrieving a Brand by id or userId.\n"
      },
      "BrandCreate": {
        "type": "object",
        "required": [
          "brandInfo"
        ],
        "properties": {
          "brandInfo": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BrandInfo"
              },
              {
                "required": [
                  "name"
                ]
              }
            ]
          }
        },
        "description": "Payload for creating a new Brand. 'brandInfo.name' and 'brandInfo.userId' is required.\n"
      },
      "GeneratePostCopyResponse": {
        "type": "object",
        "description": "Response payload containing the generated post copy.",
        "properties": {
          "postText": {
            "type": "string",
            "description": "The generated post text."
          },
          "metadata": {
            "type": "object",
            "description": "Additional metadata about the generated post.",
            "additionalProperties": true
          }
        },
        "required": [
          "postText"
        ]
      },
      "GeneratePostCopyRequest": {
        "type": "object",
        "description": "Request payload for generating post copy.",
        "properties": {
          "brandId": {
            "type": "string",
            "description": "Unique identifier for the brand."
          },
          "templateId": {
            "type": "string",
            "description": "Identifier for the template to use."
          },
          "inputData": {
            "type": "object",
            "description": "Arbitrary input data for post generation (e.g., campaign, audience, etc.).",
            "additionalProperties": true
          }
        },
        "required": [
          "brandId",
          "templateId"
        ]
      },
      "ContentOrchestratorRequest": {
        "type": "object",
        "required": [
          "brandId",
          "templateId"
        ],
        "properties": {
          "brandId": {
            "type": "string",
            "description": "The brand partition key in CosmosDB."
          },
          "templateId": {
            "type": "string",
            "description": "The template id in CosmosDB."
          }
        }
      }
    },
    "parameters": {
      "pagination": {
        "name": "Pagination",
        "in": "query",
        "description": "Pagination and sorting options",
        "required": false,
        "schema": {
          "type": "object",
          "properties": {
            "limit": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 20
            },
            "offset": {
              "type": "integer",
              "minimum": 0,
              "default": 0
            },
            "sortBy": {
              "type": "string",
              "enum": [
                "createdAt",
                "updatedAt",
                "name"
              ],
              "default": "createdAt"
            },
            "sortOrder": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "desc"
            }
          }
        }
      }
    },
    "responses": {
      "Unauthorized": {
        "description": "Authentication required",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            },
            "example": {
              "code": "UNAUTHORIZED",
              "message": "Valid API key required"
            }
          }
        }
      },
      "RateLimitExceeded": {
        "description": "Rate limit exceeded",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            },
            "example": {
              "code": "RATE_LIMIT_EXCEEDED",
              "message": "Rate limit exceeded"
            }
          }
        }
      },
      "NotFound": {
        "description": "Resource not found",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            },
            "example": {
              "code": "RESOURCE_NOT_FOUND",
              "message": "The requested resource was not found"
            }
          }
        }
      },
      "BadRequest": {
        "description": "Invalid request parameters",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            },
            "example": {
              "code": "INVALID_INPUT",
              "message": "Invalid request parameters"
            }
          }
        }
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      },
      "apiKeyAuth": {
        "type": "apiKey",
        "description": "api key authentication for all endpoints",
        "name": "x-api-key",
        "in": "header",
        "x-example": "your-api-key-here"
      }
    }
  }
}